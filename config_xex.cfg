#Start address
FEATURES {
    STARTADDRESS: default = $2000;
}

#Symbols that can be used instead of numbers
SYMBOLS {

#   __EXEHDR__:          type = import;
#   __SYSTEM_CHECK__:    type = import;  # force inclusion of "system check" load chunk
#   __AUTOSTART__:       type = import;  # force inclusion of autostart "trailer"
    __STACKSIZE__:       type = weak, value = $0800; # 2k stack
#   __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0000;
}
MEMORY {

    ZP:      start = $0082, size = $003E, type = rw, define = yes;
    LIBRAM:  start = $6000, size = $0800 - __STACKSIZE__ - %S, define = yes;
    ENGRAM:  start = $6800, size = $0600, define = yes; 

    SCREEN:  start = $0800, size = $0320, type = rw, define = yes; 
    STACK:   start = $6E00, size = $0200, type = rw, define = yes;
    INVSCR:  start = $0800, size = $01E0, type = rw, define = yes;
    PMAREA:  start = $1000, size = $0800, type = rw, define = yes;
    
# "run address" 
# "system check" load chunk
    SYSCHKCHNK: file = %O,               start = $2E00, size = $0300;
# "main program" load chunk
    MAIN:       file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;            
}


SEGMENTS {
#Segment used by the main program and library

    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    SYSCHK:    load = SYSCHKCHNK, type = rw,  define = yes, optional = yes;    
    LOWCODE:   load = MAIN,       type = ro,  define = yes, optional = yes;
    INIT:      load = MAIN,       type = rw,                optional = yes;
    CODE:      load = MAIN,       type = ro,  define = yes;
    RODATA:    load = MAIN,       run = LIBRAM, type = ro, define = yes;
    DATA:      load = MAIN,       run = LIBRAM, type = rw, define = yes;
    ALIGNDATA: load = MAIN,       type = ro,  optional = yes, define = yes, align = $400;
    ONCE:      load = MAIN,       type = ro,                optional = yes;
    STARTUP:   load = MAIN,       type = ro,  define = yes;
    BSS:       load = MAIN,       type = bss, define = yes;
    HEAP:      load = LIBRAM, type = bss, optional = yes; # must sit just below stack
    LOWBSS:    load = MAIN,       type = rw,                optional = yes;  # not zero initialized    
}

FEATURES {
    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}
