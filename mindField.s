;
; File generated by cc65 v 2.18 - Git 7b2e4d0
;
	.fopt		compiler,"cc65 v 2.18 - Git 7b2e4d0"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_printf
	.import		_clrscr
	.import		_gotoxy
	.import		_memcpy
	.import		_memset
	.import		_TITLE_VBI
	.import		_GAME_VBI
	.import		_TITLE00_DLI
	.import		_GAME00_DLI
	.import		_display_list_title
	.import		_display_list_game
	.import		_SCREEN_ADDR
	.import		_GAME_SCREEN_ADDR
	.import		_CHARSET_GAME_HI
	.import		_CHARSET_TITLE_HI
	.import		_PMBANK_HI
	.import		_MIBANK
	.import		_PMBNK0
	.import		_PMBNK1
	.import		_PMBNK2
	.import		_PMBNK3
	.import		_M3
	.import		_M4
	.import		_character_px
	.import		_character_py
	.import		_character_status
	.import		_stick_read
	.import		_character_frame
	.import		_prior_rt_clock
	.import		_mind_color
	.import		_show_countdown
	.import		_titlephase
	.import		_score
	.import		_lives
	.import		_level
	.import		_topMem
	.import		_chbase1
	.import		_row_addr
	.import		_exit_cx
	.import		_exit_cy
	.import		_exit_p0
	.import		_exit_p1
	.import		_SPRITEADDR_PLY0W
	.export		_TEMP0
	.export		_TEMP1
	.export		_TEMP2
	.export		_TEMP3
	.export		_TEMP4
	.export		_TEMP5
	.export		_TEMP6
	.export		_TEMP7
	.export		_TEMP8
	.export		_TEMP9
	.export		_a
	.export		_b
	.export		_c
	.export		_d
	.export		_e
	.export		_f
	.export		_g
	.export		_h
	.export		_i
	.export		_j
	.export		_k
	.export		_l
	.export		_p
	.export		_q
	.export		_r
	.export		_s
	.export		_difficulty
	.export		_hiscore
	.export		_screen_rows
	.export		_Display_Information_Line
	.export		_Show_Hi_Scores
	.export		_ShowTitleScreen
	.export		_Initialize_Level
	.export		_Main_Game_Loop
	.export		_pmtest
	.export		_main

.segment	"DATA"

_difficulty:
	.byte	$00
_hiscore:
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_screen_rows:
	.addr	_GAME_SCREEN_ADDR
	.addr	_GAME_SCREEN_ADDR+40
	.addr	_GAME_SCREEN_ADDR+80
	.addr	_GAME_SCREEN_ADDR+120
	.addr	_GAME_SCREEN_ADDR+160
	.addr	_GAME_SCREEN_ADDR+200
	.addr	_GAME_SCREEN_ADDR+240
	.addr	_GAME_SCREEN_ADDR+280
	.addr	_GAME_SCREEN_ADDR+320
	.addr	_GAME_SCREEN_ADDR+360
	.addr	_GAME_SCREEN_ADDR+400
	.addr	_GAME_SCREEN_ADDR+440
	.addr	_GAME_SCREEN_ADDR+480
	.addr	_GAME_SCREEN_ADDR+520
	.addr	_GAME_SCREEN_ADDR+560
	.addr	_GAME_SCREEN_ADDR+600
	.addr	_GAME_SCREEN_ADDR+640
	.addr	_GAME_SCREEN_ADDR+680
	.addr	_GAME_SCREEN_ADDR+720
	.addr	_GAME_SCREEN_ADDR+760
	.addr	_GAME_SCREEN_ADDR+800
	.addr	_GAME_SCREEN_ADDR+840
	.addr	_GAME_SCREEN_ADDR+880
	.addr	_GAME_SCREEN_ADDR+920
	.addr	_GAME_SCREEN_ADDR+960
	.addr	_GAME_SCREEN_ADDR+1000

.segment	"RODATA"

.segment	"BANK0"
L0132:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$41,$54,$41,$52,$49,$20
	.byte	$38,$2D,$42,$49,$54,$20,$43,$20,$56,$45,$52,$53,$49,$4F,$4E,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$9B,$00
L013E:
	.byte	$20,$53,$4F,$55,$4E,$44,$20,$41,$4E,$44,$20,$4D,$55,$53,$49,$43
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$9B,$00
L013B:
	.byte	$20,$47,$52,$41,$50,$48,$49,$43,$53,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$9B,$00
L0138:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$9B,$00
L0135:
	.byte	$20,$50,$52,$4F,$47,$52,$41,$4D,$4D,$49,$4E,$47,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$50,$45,$54,$45,$52,$20,$4A,$2E
	.byte	$20,$4D,$45,$59,$45,$52,$20,$9B,$00
L0091:
	.byte	$54,$4F,$44,$41,$59,$53,$20,$48,$49,$47,$48,$20,$53,$43,$4F,$52
	.byte	$45,$53,$2E,$9B,$00
L007C:
	.byte	$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$20,$20,$20,$9B,$00
L008A:
	.byte	$53,$43,$4F,$52,$45,$20,$3A,$20,$25,$64,$20,$9B,$00
L0075:
	.byte	$4C,$49,$56,$45,$53,$3A,$25,$64,$20,$9B,$00
L006A:
	.byte	$53,$43,$4F,$52,$45,$3A,$25,$64,$20,$9B,$00
L0082:
	.byte	$4C,$45,$56,$45,$4C,$3A,$25,$64,$20,$9B,$00
L00A9:
	.byte	$25,$64,$20,$3A,$20,$25,$64,$20,$9B,$00
L00A2:
	.byte	$2A,$9B,$00

.segment	"BSS"

_TEMP0:
	.res	1,$00
_TEMP1:
	.res	1,$00
_TEMP2:
	.res	1,$00
_TEMP3:
	.res	1,$00
_TEMP4:
	.res	1,$00
_TEMP5:
	.res	1,$00
_TEMP6:
	.res	1,$00
_TEMP7:
	.res	1,$00
_TEMP8:
	.res	1,$00
_TEMP9:
	.res	1,$00
_a:
	.res	1,$00
_b:
	.res	1,$00
_c:
	.res	1,$00
_d:
	.res	1,$00
_e:
	.res	1,$00
_f:
	.res	1,$00
_g:
	.res	1,$00
_h:
	.res	1,$00
_i:
	.res	1,$00
_j:
	.res	1,$00
_k:
	.res	1,$00
_l:
	.res	1,$00
_p:
	.res	2,$00
_q:
	.res	2,$00
_r:
	.res	2,$00
_s:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ Display_Information_Line (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Display_Information_Line: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	lda     #$00
	jsr     _gotoxy
	lda     #<(L006A)
	ldx     #>(L006A)
	jsr     pushax
	lda     _score
	ldx     _score+1
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #$0C
	jsr     pusha
	lda     #$00
	jsr     _gotoxy
	ldx     #$00
	lda     _lives
	ldx     #$00
	lda     #$01
	jeq     L0072
	ldx     #$00
	lda     _lives
	cmp     #$FD
	jsr     boolult
	jne     L0071
L0072:	ldx     #$00
	lda     #$00
	jeq     L0073
L0071:	ldx     #$00
	lda     #$01
L0073:	jeq     L0070
	lda     #<(L0075)
	ldx     #>(L0075)
	jsr     pushax
	ldx     #$00
	lda     _lives
	jsr     pushax
	ldy     #$04
	jsr     _printf
	jmp     L0079
L0070:	ldx     #$00
	lda     _lives
	cmp     #$FD
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0079
	lda     #<(L007C)
	ldx     #>(L007C)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L0079:	lda     #$1A
	jsr     pusha
	lda     #$00
	jsr     _gotoxy
	lda     #<(L0082)
	ldx     #>(L0082)
	jsr     pushax
	ldx     #$00
	lda     _level
	jsr     pushax
	ldy     #$04
	jsr     _printf
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Show_Hi_Scores (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Show_Hi_Scores: near

.segment	"CODE"

	lda     #$0A
	jsr     pusha
	lda     #$06
	jsr     _gotoxy
	lda     #<(L008A)
	ldx     #>(L008A)
	jsr     pushax
	lda     _score
	ldx     _score+1
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #$08
	jsr     pusha
	lda     #$08
	jsr     _gotoxy
	lda     #<(L0091)
	ldx     #>(L0091)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	ldx     #$00
	lda     #$01
	sta     _i
L0093:	ldx     #$00
	lda     _i
	cmp     #$06
	jsr     boolult
	jne     L0096
	jmp     L0094
L0096:	ldx     #$00
	lda     _k
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     toseqax
	jeq     L009B
	lda     #$0C
	jsr     pusha
	ldx     #$00
	lda     _i
	jsr     incax8
	ldx     #$00
	jsr     _gotoxy
	lda     #<(L00A2)
	ldx     #>(L00A2)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L009B:	lda     #$0E
	jsr     pusha
	ldx     #$00
	lda     _i
	jsr     incax8
	ldx     #$00
	jsr     _gotoxy
	lda     #<(L00A9)
	ldx     #>(L00A9)
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     aslax1
	clc
	adc     #<(_hiscore)
	tay
	txa
	adc     #>(_hiscore)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	ldy     #$06
	jsr     _printf
	ldx     #$00
	lda     _i
	inc     _i
	jmp     L0093
L0094:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ShowTitleScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ShowTitleScreen: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	sta     $D40E
	ldx     #$00
	lda     #$00
	sta     $D400
	lda     #<(_TITLE00_DLI)
	ldx     #>(_TITLE00_DLI)
	sta     $0200
	stx     $0200+1
	lda     #<(_TITLE_VBI)
	ldx     #>(_TITLE_VBI)
	sta     $0224
	stx     $0224+1
	lda     #<(_display_list_title)
	ldx     #>(_display_list_title)
	sta     $D402
	stx     $D402+1
	lda     #<(_display_list_title)
	ldx     #>(_display_list_title)
	sta     $0230
	stx     $0230+1
	lda     #<(_GAME_SCREEN_ADDR)
	ldx     #>(_GAME_SCREEN_ADDR)
	sta     $0058
	stx     $0058+1
	lda     #<(_CHARSET_TITLE_HI)
	ldx     #>(_CHARSET_TITLE_HI)
	ldx     #$00
	sta     $02F4
	ldx     #$00
	lda     #$05
	sta     _SCREEN_ADDR
	ldx     #$00
	lda     #$00
	sta     $0052
	ldx     #$00
	lda     #$00
	sta     $02C6
	ldx     #$00
	lda     #$0C
	sta     $02C5
	ldx     #$00
	lda     #$00
	sta     $D01B
	ldx     #$00
	lda     #$00
	sta     $D01E
	ldx     #$00
	lda     #$06
	sta     _i
	ldx     #$00
	lda     #$06
	sta     _k
	jmp     L00FB
L00F9:	lda     _score
	ldx     _score+1
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     aslax1
	clc
	adc     #<(_hiscore)
	tay
	txa
	adc     #>(_hiscore)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     tosugtax
	jeq     L00FD
	ldx     #$00
	lda     _i
	sta     _k
L00FD:	ldx     #$00
	lda     _i
	jsr     decax1
	ldx     #$00
	sta     _i
L00FB:	ldx     #$00
	lda     _i
	cmp     #$00
	jsr     boolne
	jne     L00F9
	ldx     #$00
	lda     #$44
	sta     $D018
	ldx     #$00
	lda     #$8E
	sta     $D01A
	ldx     #$00
	lda     _k
	cmp     #$05
	jsr     boolult
	jeq     L010E
	ldx     #$00
	lda     #$06
	sta     _i
	jmp     L0114
L0112:	ldx     #$00
	lda     _i
	jsr     aslax1
	clc
	adc     #<(_hiscore)
	tay
	txa
	adc     #>(_hiscore)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     decax1
	jsr     aslax1
	clc
	adc     #<(_hiscore)
	tay
	txa
	adc     #>(_hiscore)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	ldy     #$00
	jsr     staxspidx
	ldx     #$00
	lda     _i
	jsr     decax1
	ldx     #$00
	sta     _i
L0114:	ldx     #$00
	lda     _i
	jsr     pushax
	ldx     #$00
	lda     _k
	jsr     tosugtax
	jne     L0112
	ldx     #$00
	lda     _k
	jsr     aslax1
	clc
	adc     #<(_hiscore)
	tay
	txa
	adc     #>(_hiscore)
	tax
	tya
	jsr     pushax
	lda     _score
	ldx     _score+1
	ldy     #$00
	jsr     staxspidx
L010E:	lda     #<(_MIBANK)
	ldx     #>(_MIBANK)
	jsr     pushax
	ldx     #$04
	lda     #$FF
	jsr     __bzero
	lda     #<(_SCREEN_ADDR)
	ldx     #>(_SCREEN_ADDR)
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     __bzero
	ldx     #$00
	lda     #$00
	sta     _titlephase
	ldx     #$00
	lda     #$06
	sta     _i
	ldx     #$00
	lda     #$06
	sta     _k
	jsr     _clrscr
	lda     #$00
	jsr     pusha
	lda     #$00
	jsr     _gotoxy
	lda     #<(L0132)
	ldx     #>(L0132)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	lda     #<(L0135)
	ldx     #>(L0135)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	lda     #<(L0138)
	ldx     #>(L0138)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	lda     #<(L013B)
	ldx     #>(L013B)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	lda     #<(L013E)
	ldx     #>(L013E)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	ldx     #$00
	lda     #$00
	sta     _TEMP5
	ldx     #$00
	lda     #$01
	sta     $D01B
	ldx     #$00
	lda     #$06
	sta     _k
	ldx     #$00
	lda     #$05
	sta     _i
	ldx     #$00
	lda     #$D8
	sta     $02C4
	ldx     #$00
	lda     #$06
	sta     $02C5
	ldx     #$00
	lda     #$AA
	sta     $02C6
	ldx     #$00
	lda     #$36
	sta     $02C7
	ldx     #$00
	lda     #$22
	sta     $02C8
	ldx     #$00
	lda     #$00
	sta     $D01D
	jsr     _Show_Hi_Scores
	jmp     L016A
L016A:	ldx     #$00
	lda     $D40B
	jsr     asrax2
	stx     tmp1
	ora     tmp1
	jne     L016A
	ldx     #$00
	lda     #$C0
	sta     $D40E
	ldx     #$00
	lda     #$22
	sta     $D400
	ldx     #$00
	lda     #$22
	sta     $022F
	ldx     #$00
	lda     #$00
	sta     _TEMP5
	jmp     L0185
L0181:	ldx     #$00
	lda     $D01F
	ldx     #$00
	and     #$01
	cpx     #$00
	bne     L018A
	cmp     #$00
L018A:	jsr     booleq
	jeq     L0185
	ldx     #$00
	lda     #$FF
	sta     _TEMP5
L0185:	ldx     #$00
	lda     _TEMP5
	cmp     #$00
	jsr     booleq
	jne     L0181
	ldx     #$00
	lda     #$00
	sta     $D40E
	jsr     _clrscr
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Initialize_Level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Initialize_Level: near

.segment	"CODE"

	lda     #<(_GAME_SCREEN_ADDR)
	ldx     #>(_GAME_SCREEN_ADDR)
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     __bzero
	ldx     #$00
	lda     #$46
	sta     _mind_color
	ldx     #$00
	lda     #$C0
	sta     $D40E
	ldx     #$00
	lda     #$00
	sta     _i
L019F:	ldx     #$00
	lda     _i
	cmp     #$10
	jsr     boolult
	jne     L01A2
	jmp     L01A0
L01A2:	jsr     _RANDOM_PLACE_MINDS
	ldx     #$00
	lda     _i
	jsr     incax1
	ldx     #$00
	sta     _i
	jmp     L019F
L01A0:	ldx     #$00
	lda     #$7C
	sta     _character_px
	ldx     #$00
	lda     #$D8
	sta     _character_py
	ldx     #$00
	lda     #$00
	sta     _character_status
	ldx     #$00
	lda     #$C1
	sta     _M3
	ldx     #$00
	lda     #$00
	sta     _M4
	jsr     _SCAN_FOR_MINDS
	ldx     #$00
	lda     $D20A
	jsr     incax4
	ldx     #$00
	and     #$1E
	ldx     #$00
	sta     _exit_cx
	ldx     #$00
	lda     #$00
	sta     _exit_cy
	ldx     #$00
	lda     _exit_cx
	jsr     shlax2
	ldy     #$2E
	jsr     incaxy
	ldx     #$00
	sta     _exit_p0
	ldx     #$00
	lda     _exit_p0
	jsr     incax8
	ldx     #$00
	sta     _exit_p1
	ldx     #$00
	lda     _exit_cx
	clc
	adc     #<(_GAME_SCREEN_ADDR)
	tay
	txa
	adc     #>(_GAME_SCREEN_ADDR)
	tax
	tya
	sta     _p
	stx     _p+1
	lda     _p
	ldx     _p+1
	jsr     pushax
	ldx     #$4B
	lda     #$4A
	ldy     #$00
	jsr     staxspidx
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Main_Game_Loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Main_Game_Loop: near

.segment	"CODE"

	jmp     L02C1
L01CE:	ldx     #$00
	lda     _prior_rt_clock
	jsr     pushax
	ldx     #$00
	lda     $0014
	jsr     tosneax
	jeq     L02C1
	ldx     #$00
	lda     $0014
	sta     _prior_rt_clock
	ldx     #$00
	lda     _character_px
	ldy     #$2F
	jsr     decaxy
	jsr     shrax2
	ldx     #$00
	sta     _a
	ldx     #$00
	lda     _a
	cmp     #$03
	jsr     boolult
	jeq     L01DD
	ldx     #$00
	lda     #$02
	sta     _a
	jmp     L01E2
L01DD:	ldx     #$00
	lda     _a
	cmp     #$25
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L01E2
	ldx     #$00
	lda     #$25
	sta     _a
L01E2:	ldx     #$00
	lda     _character_py
	ldy     #$10
	jsr     decaxy
	jsr     shrax3
	ldx     #$00
	sta     _b
	ldx     #$00
	lda     _b
	cmp     #$03
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L01E9
	ldx     #$00
	lda     _b
	jsr     decax2
	ldx     #$00
	sta     _b
	jmp     L01ED
L01E9:	ldx     #$00
	lda     #$00
	sta     _b
L01ED:	ldx     #$00
	lda     _b
	jsr     aslax1
	clc
	adc     #<(_screen_rows)
	tay
	txa
	adc     #>(_screen_rows)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	ldx     #$00
	lda     _a
	jsr     tosaddax
	sta     _row_addr
	stx     _row_addr+1
	ldx     #$00
	lda     #$41
	sta     _M3
	ldx     #$00
	lda     #$C1
	sta     _M4
	jsr     _SCAN_FOR_MINDS
	ldx     #$00
	lda     _character_status
	cmp     #$00
	jsr     booleq
	jeq     L0254
	ldx     #$00
	lda     $D300
	ldx     #$00
	and     #$0F
	ldx     #$00
	sta     _stick_read
	ldx     #$00
	lda     $0014
	ldx     #$00
	and     #$04
	ldx     #$00
	sta     _g
	ldx     #$00
	lda     #$00
	sta     _character_frame
	ldx     #$00
	lda     _stick_read
	ldx     #$00
	and     #$01
	cpx     #$00
	bne     L020F
	cmp     #$00
L020F:	jsr     booleq
	jeq     L020C
	ldx     #$00
	lda     _character_py
	jsr     decax1
	ldx     #$00
	sta     _character_py
	ldx     #$00
	lda     _character_py
	cmp     #$10
	jsr     boolult
	jeq     L0212
	ldx     #$00
	lda     #$10
	sta     _character_py
L0212:	ldx     #$00
	lda     _g
	jsr     incax1
	ldx     #$00
	sta     _character_frame
L020C:	ldx     #$00
	lda     _stick_read
	ldx     #$00
	and     #$02
	cpx     #$00
	bne     L021B
	cmp     #$00
L021B:	jsr     booleq
	jeq     L0218
	ldx     #$00
	lda     _character_py
	jsr     incax1
	ldx     #$00
	sta     _character_py
	ldx     #$00
	lda     _character_py
	cmp     #$E9
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L021E
	ldx     #$00
	lda     #$E8
	sta     _character_py
L021E:	ldx     #$00
	lda     _g
	jsr     incax3
	ldx     #$00
	sta     _character_frame
L0218:	ldx     #$00
	lda     _stick_read
	ldx     #$00
	and     #$04
	cpx     #$00
	bne     L0227
	cmp     #$00
L0227:	jsr     booleq
	jeq     L0224
	ldx     #$00
	lda     _character_px
	jsr     decax1
	ldx     #$00
	sta     _character_px
	ldx     #$00
	lda     _character_px
	cmp     #$30
	jsr     boolult
	jeq     L022A
	ldx     #$00
	lda     #$30
	sta     _character_px
L022A:	ldx     #$00
	lda     _g
	jsr     incax2
	ldx     #$00
	sta     _character_frame
L0224:	ldx     #$00
	lda     _stick_read
	ldx     #$00
	and     #$08
	cpx     #$00
	bne     L0233
	cmp     #$00
L0233:	jsr     booleq
	jeq     L0230
	ldx     #$00
	lda     _character_px
	jsr     incax1
	ldx     #$00
	sta     _character_px
	ldx     #$00
	lda     _character_px
	cmp     #$C9
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0236
	ldx     #$00
	lda     #$C8
	sta     _character_px
L0236:	ldx     #$00
	lda     _g
	jsr     incax4
	ldx     #$00
	sta     _character_frame
L0230:	ldx     #$00
	lda     #$CA
	sta     $02C0
	ldx     #$00
	lda     #$C1
	sta     _M3
	ldx     #$00
	lda     #$41
	sta     _M4
	jsr     _SCAN_FOR_MINDS
	ldx     #$00
	lda     _character_px
	ldy     #$2F
	jsr     decaxy
	jsr     shrax2
	ldx     #$00
	sta     _a
	ldx     #$00
	lda     _character_py
	ldy     #$1E
	jsr     decaxy
	jsr     shrax3
	ldx     #$00
	sta     _b
	ldx     #$00
	lda     _b
	sta     _f
L0253:	ldx     #$00
	lda     _f
	jsr     pushax
	ldx     #$00
	lda     _b
	jsr     incax1
	jsr     tosuleax
	jne     L0256
	jmp     L0254
L0256:	ldx     #$00
	lda     _f
	jsr     aslax1
	clc
	adc     #<(_screen_rows)
	tay
	txa
	adc     #>(_screen_rows)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	ldx     #$00
	lda     _a
	jsr     tosaddax
	sta     _row_addr
	stx     _row_addr+1
	lda     _row_addr
	ldx     _row_addr+1
	sta     _p
	stx     _p+1
L025F:	lda     _p
	ldx     _p+1
	jsr     pushax
	lda     _row_addr
	ldx     _row_addr+1
	jsr     incax1
	jsr     tosuleax
	jne     L0262
	jmp     L0255
L0262:	lda     _p
	ldx     _p+1
	ldy     #$00
	jsr     ldauidx
	sta     _e
	ldx     #$00
	lda     _e
	cmp     #$41
	jsr     booleq
	jeq     L0261
	ldx     #$00
	lda     #$0F
	sta     $02C0
	ldx     #$00
	lda     #$01
	sta     _character_status
	lda     #1
	ldx     #0
	jsr     _START_SOUND
L0261:	lda     _p
	ldx     _p+1
	jsr     incax1
	sta     _p
	stx     _p+1
	jmp     L025F
L0255:	ldx     #$00
	lda     _f
	jsr     incax1
	ldx     #$00
	sta     _f
	jmp     L0253
L0254:	ldx     #$00
	lda     _character_py
	cmp     #$26
	jsr     boolult
	jeq     L0285
	ldx     #$00
	lda     #$26
	sta     _character_py
	ldx     #$00
	lda     _character_px
	jsr     pushax
	ldx     #$00
	lda     _exit_p0
	jsr     tosugtax
	jeq     L0282
	ldx     #$00
	lda     _character_px
	jsr     pushax
	ldx     #$00
	lda     _exit_p1
	jsr     tosultax
	jne     L0280
L0282:	ldx     #$00
	lda     #$00
	jeq     L0284
L0280:	ldx     #$00
	lda     #$01
L0284:	jeq     L0285
	ldx     #$00
	lda     _character_status
	cmp     #$00
	jsr     booleq
	jeq     L0285
	ldx     #$00
	lda     #$20
	sta     _character_status
	lda     #1
	ldx     #1
	jsr     _START_SOUND
L0285:	ldx     #$00
	lda     _character_status
	cmp     #$00
	jsr     boolne
	jeq     L0292
	ldx     #$00
	lda     _character_status
	cmp     #$1E
	jsr     boolult
	jne     L0290
L0292:	ldx     #$00
	lda     #$00
	jeq     L0294
L0290:	ldx     #$00
	lda     #$01
L0294:	jeq     L02A0
	ldx     #$00
	lda     _character_status
	jsr     incax1
	ldx     #$00
	sta     _character_status
	ldx     #$00
	lda     _character_status
	cmp     #$1E
	jsr     booleq
	jeq     L0297
	ldx     #$00
	lda     #$80
	sta     _character_status
L0297:	ldx     #$00
	lda     _character_status
	cmp     #$10
	jsr     boolult
	jeq     L029B
	ldx     #$00
	lda     _character_status
	jsr     shrax2
	ldy     #$10
	jsr     incaxy
	ldx     #$00
	sta     _character_frame
L029B:	ldx     #$00
	lda     _character_status
	cmp     #$10
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L02A0
	ldx     #$00
	lda     #$13
	sta     _character_frame
	ldx     #$00
	lda     #$00
	sta     _character_px
L02A0:	ldx     #$00
	lda     _character_status
	cmp     #$20
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L02A9
	ldx     #$00
	lda     _character_status
	cmp     #$40
	jsr     boolult
	jne     L02A7
L02A9:	ldx     #$00
	lda     #$00
	jeq     L02AB
L02A7:	ldx     #$00
	lda     #$01
L02AB:	jeq     L02BB
	ldx     #$00
	lda     _character_status
	jsr     incax1
	ldx     #$00
	sta     _character_status
	ldx     #$00
	lda     _character_status
	cmp     #$40
	jsr     booleq
	jeq     L02AE
	ldx     #$00
	lda     #$90
	sta     _character_status
L02AE:	lda     _character_status
	jeq     L02B4
	ldx     #$00
	lda     #$01
	jne     L02B3
L02B4:	ldx     #$00
	lda     #$00
	jeq     L02B5
L02B3:	ldx     #$00
	lda     #$01
L02B5:	jeq     L02B2
	ldx     #$00
	lda     _exit_cx
	clc
	adc     #<(_GAME_SCREEN_ADDR)
	tay
	txa
	adc     #>(_GAME_SCREEN_ADDR)
	tax
	tya
	jsr     pushax
	ldx     #$4B
	lda     #$4A
	ldy     #$00
	jsr     staxspidx
	jmp     L02BB
L02B2:	ldx     #$00
	lda     _exit_cx
	clc
	adc     #<(_GAME_SCREEN_ADDR)
	tay
	txa
	adc     #>(_GAME_SCREEN_ADDR)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$00
	ldy     #$00
	jsr     staxspidx
L02BB:	ldx     #$00
	lda     $D01F
	cmp     #$07
	jsr     boolne
	jeq     L02C1
	ldx     #$00
	lda     #$84
	sta     _character_status
L02C1:	ldx     #$00
	lda     _character_status
	cmp     #$61
	jsr     boolult
	jne     L01CE
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pmtest (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pmtest: near

.segment	"CODE"

	lda     #<(_display_list_game)
	ldx     #>(_display_list_game)
	sta     $D402
	stx     $D402+1
	lda     #<(_display_list_game)
	ldx     #>(_display_list_game)
	sta     $0230
	stx     $0230+1
	lda     #<(_SCREEN_ADDR)
	ldx     #>(_SCREEN_ADDR)
	sta     $0058
	stx     $0058+1
	lda     #<(_CHARSET_GAME_HI)
	ldx     #>(_CHARSET_GAME_HI)
	ldx     #$00
	sta     $02F4
	lda     #<(_PMBANK_HI)
	ldx     #>(_PMBANK_HI)
	ldx     #$00
	sta     $D407
	ldx     #$00
	lda     #$3E
	sta     $D400
	ldx     #$00
	lda     #$3E
	sta     $022F
	ldx     #$00
	lda     #$03
	sta     $D01D
	ldx     #$00
	lda     #$01
	sta     $D01B
	ldx     #$00
	lda     #$CA
	sta     $02C0
	ldx     #$00
	lda     #$8A
	sta     $02C1
	ldx     #$00
	lda     #$44
	sta     $02C2
	ldx     #$00
	lda     #$18
	sta     $02C3
	ldx     #$00
	lda     #$3C
	sta     $D000
	ldx     #$00
	lda     #$50
	sta     $D001
	ldx     #$00
	lda     #$64
	sta     $D002
	ldx     #$00
	lda     #$78
	sta     $D003
	ldx     #$00
	lda     #$92
	sta     $D004
	ldx     #$00
	lda     #$90
	sta     $D005
	ldx     #$00
	lda     #$8E
	sta     $D006
	ldx     #$00
	lda     #$8C
	sta     $D007
	ldx     #$00
	lda     #$00
	sta     $D008
	ldx     #$00
	lda     #$00
	sta     $D009
	ldx     #$00
	lda     #$00
	sta     $D00A
	ldx     #$00
	lda     #$00
	sta     $D00B
	ldx     #$00
	lda     #$00
	sta     $D00C
	ldx     #$00
	lda     #$C0
	sta     $D40E
L034F:	ldx     #$00
	lda     #$00
	sta     _i
L0351:	ldx     #$00
	lda     _i
	cmp     #$14
	jsr     boolult
	jne     L0354
	jmp     L0352
L0354:	ldx     #$00
	lda     #$00
	sta     _j
L0359:	ldx     #$00
	lda     _j
	cmp     #$F0
	jsr     boolult
	jne     L035C
	jmp     L0353
L035C:	ldx     #$00
	lda     _j
	clc
	adc     #<(_PMBNK0)
	tay
	txa
	adc     #>(_PMBNK0)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     aslax1
	clc
	adc     #<(_SPRITEADDR_PLY0W)
	tay
	txa
	adc     #>(_SPRITEADDR_PLY0W)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	ldx     #$00
	lda     #$0E
	jsr     _memcpy
	ldx     #$00
	lda     _j
	clc
	adc     #<(_PMBNK1)
	tay
	txa
	adc     #>(_PMBNK1)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     aslax1
	clc
	adc     #<(_SPRITEADDR_PLY0W)
	tay
	txa
	adc     #>(_SPRITEADDR_PLY0W)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	ldx     #$00
	lda     #$0E
	jsr     _memcpy
	ldx     #$00
	lda     _j
	clc
	adc     #<(_PMBNK2)
	tay
	txa
	adc     #>(_PMBNK2)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     aslax1
	clc
	adc     #<(_SPRITEADDR_PLY0W)
	tay
	txa
	adc     #>(_SPRITEADDR_PLY0W)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	ldx     #$00
	lda     #$0E
	jsr     _memcpy
	ldx     #$00
	lda     _j
	clc
	adc     #<(_PMBNK3)
	tay
	txa
	adc     #>(_PMBNK3)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     aslax1
	clc
	adc     #<(_SPRITEADDR_PLY0W)
	tay
	txa
	adc     #>(_SPRITEADDR_PLY0W)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	ldx     #$00
	lda     #$0E
	jsr     _memcpy
	ldx     #$00
	lda     _j
	clc
	adc     #<(_MIBANK)
	tay
	txa
	adc     #>(_MIBANK)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     aslax1
	clc
	adc     #<(_SPRITEADDR_PLY0W)
	tay
	txa
	adc     #>(_SPRITEADDR_PLY0W)
	tax
	tya
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	ldx     #$00
	lda     #$0E
	jsr     _memcpy
	ldx     #$00
	lda     _j
	ldy     #$0E
	jsr     incaxy
	ldx     #$00
	sta     _j
	jmp     L0359
L0353:	ldx     #$00
	lda     _i
	inc     _i
	jmp     L0351
L0352:	jmp     L034F
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldx     #$00
	lda     _chbase1
	tax
	lda     #$00
	sta     _topMem
	stx     _topMem+1
	jmp     L0459
L037F:	ldx     #$00
	lda     #$00
	sta     $D40E
	ldx     #$00
	lda     #$00
	sta     $D400
	jsr     _ShowTitleScreen
	ldx     #$00
	lda     #$00
	sta     _score
	stx     _score+1
	ldx     #$00
	lda     #$05
	sta     _lives
	ldx     #$00
	lda     #$01
	sta     _level
	ldx     #$00
	lda     #$00
	sta     _character_status
	lda     #<(_MIBANK)
	ldx     #>(_MIBANK)
	jsr     pushax
	ldx     #$04
	lda     #$FF
	jsr     __bzero
	lda     #<(_display_list_game)
	ldx     #>(_display_list_game)
	sta     $D402
	stx     $D402+1
	lda     #<(_display_list_game)
	ldx     #>(_display_list_game)
	sta     $0230
	stx     $0230+1
	lda     #<(_SCREEN_ADDR)
	ldx     #>(_SCREEN_ADDR)
	sta     $0058
	stx     $0058+1
	lda     #<(_GAME00_DLI)
	ldx     #>(_GAME00_DLI)
	sta     $0200
	stx     $0200+1
	lda     #<(_CHARSET_GAME_HI)
	ldx     #>(_CHARSET_GAME_HI)
	ldx     #$00
	sta     $02F4
	lda     #<(_PMBANK_HI)
	ldx     #>(_PMBANK_HI)
	ldx     #$00
	sta     $D407
	ldx     #$00
	lda     #$3E
	sta     $D400
	ldx     #$00
	lda     #$3E
	sta     $022F
	ldx     #$00
	lda     #$03
	sta     $D01D
	ldx     #$00
	lda     #$01
	sta     $D01B
	jmp     L0450
L03CC:	jsr     _Initialize_Level
	ldx     #$00
	lda     #$8E
	sta     $02C4
	ldx     #$00
	lda     #$D4
	sta     $02C5
	ldx     #$00
	lda     #$96
	sta     $02C7
	ldx     #$00
	lda     #$22
	sta     $02C8
	ldx     #$00
	lda     #$CA
	sta     $02C0
	ldx     #$00
	lda     #$FA
	sta     $02C1
	ldx     #$00
	lda     #$88
	sta     $02C2
	ldx     #$00
	lda     #$24
	sta     $02C3
	ldx     #$00
	lda     #$00
	sta     $D008
	ldx     #$00
	lda     #$00
	sta     $D009
	ldx     #$00
	lda     #$00
	sta     $D00A
	ldx     #$00
	lda     #$00
	sta     $D00B
	ldx     #$00
	lda     #$00
	sta     $D00C
	ldx     #$00
	lda     #$C0
	sta     $D40E
	ldx     #$00
	lda     #$3E
	sta     $D400
	jsr     _Display_Information_Line
	lda     #<(_GAME_VBI)
	ldx     #>(_GAME_VBI)
	sta     $0224
	stx     $0224+1
	ldx     #$00
	lda     #$B4
	sta     _show_countdown
	ldx     #$00
	lda     #$3F
	sta     _mind_color
	ldx     #$00
	lda     #$00
	sta     _character_frame
	ldx     #$00
	lda     $0014
	sta     _prior_rt_clock
	jmp     L043E
L042C:	ldx     #$00
	lda     _prior_rt_clock
	jsr     pushax
	ldx     #$00
	lda     $0014
	jsr     tosneax
	jeq     L043E
	ldx     #$00
	lda     $0014
	sta     _prior_rt_clock
	ldx     #$00
	lda     _show_countdown
	cmp     #$00
	jsr     boolne
	jeq     L0439
	ldx     #$00
	lda     _show_countdown
	jsr     decax1
	ldx     #$00
	sta     _show_countdown
	jmp     L043E
L0439:	ldx     #$00
	lda     _mind_color
	cmp     #$32
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L043E
	ldx     #$00
	lda     _mind_color
	jsr     decax1
	ldx     #$00
	sta     _mind_color
L043E:	ldx     #$00
	lda     _show_countdown
	cmp     #$00
	jsr     boolne
	jne     L042F
	ldx     #$00
	lda     _mind_color
	cmp     #$32
	lda     #$00
	ldx     #$00
	rol     a
	jne     L042F
	ldx     #$00
	lda     #$00
	jeq     L0430
L042F:	ldx     #$00
	lda     #$01
L0430:	jne     L042C
	ldx     #$00
	lda     #$22
	sta     _mind_color
	jsr     _Main_Game_Loop
	ldx     #$00
	lda     _character_status
	cmp     #$80
	jsr     booleq
	jeq     L0449
	ldx     #$00
	lda     _lives
	jsr     decax1
	ldx     #$00
	sta     _lives
	ldx     #$00
	lda     _lives
	cmp     #$FF
	jsr     booleq
	jeq     L0449
	ldx     #$00
	lda     #$9F
	sta     _character_status
	ldx     #$00
	lda     #$00
	sta     _character_px
	jsr     _Display_Information_Line
L0449:	ldx     #$00
	lda     _character_status
	cmp     #$90
	jsr     booleq
	jeq     L0450
	lda     _score
	ldx     _score+1
	ldy     #$0A
	jsr     incaxy
	sta     _score
	stx     _score+1
	ldx     #$00
	lda     _level
	jsr     incax1
	ldx     #$00
	sta     _level
L0450:	ldx     #$00
	lda     _character_status
	cmp     #$9F
	jsr     boolne
	jne     L03CC
	ldx     #$00
	lda     _character_status
	cmp     #$9F
	jsr     booleq
	jeq     L0459
	jmp     L045C
L0458:	ldx     #$00
	lda     _prior_rt_clock
	jsr     pushax
	ldx     #$00
	lda     $0014
	jsr     tosneax
	jeq     L045C
	ldx     #$00
	lda     _character_status
	jsr     decax1
	ldx     #$00
	sta     _character_status
	ldx     #$00
	lda     $0014
	sta     _prior_rt_clock
L045C:	ldx     #$00
	lda     _character_status
	cmp     #$50
	lda     #$00
	ldx     #$00
	rol     a
	jne     L0458
L0459:	jmp     L037F
	rts

.endproc

