#Start address
FEATURES {
    STARTADDRESS: default = $2000;
}

#Symbols that can be used instead of numbers
SYMBOLS {
    __EXEHDR__:          type = import;
    __SYSTEM_CHECK__:    type = import;  # force inclusion of "system check" load chunk
    __AUTOSTART__:       type = import;  # force inclusion of autostart "trailer"
    __STACKSIZE__:       type = weak, value = $0800; # 2k stack
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0000;
}

MEMORY {
#Zero page
    ZP:         file = "", define = yes, start = $0082, size = $007E;
    HEADER:     file = %O,               start = $0000, size = $0002;
    SYSCHKHDR:  file = %O,               start = $0000, size = $0004;
    SYSCHKCHNK: file = %O,               start = $2E00, size = $0300;
    SYSCHKTRL:  file = %O,               start = $0000, size = $0006;
    MAINHDR:    file = %O,               start = $0000, size = $0004;
    MAIN:       file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;
    PMGAREA:    file = "",define=yes,    start = $0800, size = $0800;
    LIBRAM:                              start = $4000, size = $0800 - __STACKSIZE__ - %S, define = yes;
    ENGRAM:                              start = $4800, size = $0600, define = yes; 
    DATA:                                start = $5000, size = $2000, type = rw, file = %O;
    TRAILER:    file = %O,               start = $0000, size = $0006; 

}
FILES {
    %O: format = atari;
}
FORMATS {
    atari: runad = start,
           initad = SYSCHKCHNK: __SYSTEM_CHECK__;
}           
SEGMENTS {
#Segment used by the main program and library
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    EXEHDR:    load = HEADER,     type = ro;
    SYSCHKHDR: load = SYSCHKHDR,  type = ro,                optional = yes;
    SYSCHK:    load = SYSCHKCHNK, type = rw,  define = yes, optional = yes;
    SYSCHKTRL: load = SYSCHKTRL,  type = ro,                optional = yes;    
    INIT:      load = MAIN,       type = rw,                optional = yes;
    CODE:      load = MAIN,       type = ro,  define = yes;
    RODATA:    load = MAIN,       type = ro;
    DATA:      load = MAIN,       type = rw;
    ONCE:      load = MAIN,       type = ro,                optional = yes;
    STARTUP:   load = MAIN,       type = ro,  define = yes;
    BSS:       load = MAIN,       type = bss, define = yes;
    MAINHDR:   load = MAINHDR,    type = ro;
    HEAP:      load = LIBRAM, type = bss, optional = yes; # must sit just below stack
    LOWBSS:    load = MAIN,       type = rw,                optional = yes;  # not zero initialized
    LOWCODE:   load = MAIN,       type = rw,  define = yes, optional = yes;    
    AUTOSTRT:  load = TRAILER,    type = ro;
}

FEATURES {
    CONDES: segment = ONCE,
            type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__;            
    CONDES: segment = RODATA, 
            type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__;            
    CONDES: segment = RODATA,
            type = interruptor,
      	    label   = __INTERRUPTOR_TABLE__,
      	    count   = __INTERRUPTOR_COUNT__;
}

