#Start address
FEATURES {
    STARTADDRESS: default = $8000;
}

#Symbols that can be used instead of numbers
SYMBOLS {

    __STACKSIZE__:       type = weak, value = $0800; # 2k stack
#   __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0000;
}
MEMORY {
    ZP:      start = $0082, size = $003E, type = rw, define = yes;
    LIBRAM:  start = $6000, size = $0800 - __STACKSIZE__ - %S, define = yes;
    ENGRAM:  start = $6800, size = $0600, define = yes; 
    SCREEN:  start = $0800, size = $0320, type = rw, define = yes; 
    STACK:   start = $6E00, size = $0200, type = rw, define = yes;
    INVSCR:  start = $0800, size = $01E0, type = rw, define = yes;
    PMAREA:  start = $1000, size = $0800, type = rw, define = yes;
    CHARSET: start = $9400, size = $0400, type = rw, define = yes;
    INVCHAR: start = $9400, size = $1000, type = rw, define = yes;    
    CART0:      start = $8000, size = $2400, type = ro, fill = yes, fillval = $00, file = %O;
    CARTDATA:   start = $A400, size = $1BFA, type = ro, fill = yes, fillval = $00, file = %O;
    CARTVECTORS:start = $BFFA, size = 6,     type = ro, file = %O;     
#   CART1:      start = $A000, size = $2000, type = ro, fill = yes, fillval = $11, file = %O;
#   CART2:      start = $A000, size = $2000, type = ro, fill = yes, fillval = $22, file = %O;
#   CART3:      start = $A000, size = $2000, type = ro, fill = yes, fillval = $33, file = %O;
#   CART4:      start = $A000, size = $2000, type = ro, fill = yes, fillval = $44, file = %O;
#   CART5:      start = $A000, size = $2000, type = ro, fill = yes, fillval = $55, file = %O;
#   CART6:      start = $A000, size = $2000, type = ro, fill = yes, fillval = $66, file = %O;
#   CART7:      start = $A000, size = $2000, type = ro, fill = yes, fillval = $77, file = %O;
}

SEGMENTS {
#Segment used by the main program and library
    LOWCODE:  load = CART0, type = ro, define = yes, optional = yes;
    INIT:     load = CART0, type = ro, define = yes, optional = yes;
    CODE:     load = CART0, run = CART0,  type = ro, define = yes;
    RODATA:   load = CART0, run = LIBRAM, type = ro, define = yes;
    DATA:     load = CART0, run = LIBRAM, type = rw, define = yes;
    ONCE:     load = CART0,  type = ro,   optional = yes;
    STARTUP:  load = CART0,  type = ro,  define = yes;
    BSS:      load = LIBRAM, type = bss, define = yes;
    HEAP:     load = LIBRAM, type = bss, optional = yes; # must sit just below stack

#   LOWCODE:  load = CART0, type = ro, define = yes, optional = yes;
#   INIT:     load = CART0, type = ro, define = yes, optional = yes;
#   CODE:     load = CART0, run = CART0, type = ro, define = yes;
#   RODATA:   load = CART0, run = CART0, type = ro, define = yes;
#   DATA:     load = CART0, run = LIBRAM, type = rw, define = yes;

#   BSS:      load = CART0,  type = ro, define = yes;
#   HEAP:     load = CART0,  type = ro, optional = yes; # must sit just below stack 
    
    BANK0:     load = CART0, run = CART0, type = ro, define = yes;
    DATA0:     load = CARTDATA, run = CARTDATA, type = ro, define = yes; 
#   BANK1:     load = CART1, run = CART1, type = ro, define = yes;
#   BANK2:     load = CART2, run = CART2, type = ro, define = yes;
#   BANK3:     load = CART3, run = CART3, type = ro, define = yes;
#   BANK4:     load = CART4, run = CART4, type = ro, define = yes;
#   BANK5:     load = CART5, run = CART5, type = ro, define = yes;
#   BANK6:     load = CART6, run = CART6, type = ro, define = yes;
#   BANK7:     load = CART7, run = CART7, type = ro, define = yes;
    VECTORS:   load = CARTVECTORS, run = CARTVECTORS, type = ro, define = yes;
    ZEROPAGE: load = ZP,      type = zp;
    EXTZP:    load = ZP,      type = zp,               optional = yes;        
}
FEATURES {
    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}
